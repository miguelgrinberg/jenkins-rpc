- name: install bonding / bridge dependencies
  apt: pkg={{ item }} state=installed
  with_items:
    - ifenslave-2.6
    - bridge-utils
    - vlan

- name: load kernel bonding
  modprobe: name=bonding state=present

- name: load 802.1q module
  modprobe: name=8021q state=present

- name: ensure module persistance
  lineinfile: dest=/etc/modules state=present regexp="^{{ item }}" line="{{ item }}"
  with_items:
    - bonding
    - 8021q

- name: retrieve container ip address
  local_action: script cidr.py {{ rpc_user_config.container_cidr }} {{ ansible_default_ipv4.address }}
  register: container_address
  when: rpc_user_config.container_cidr is defined

- name: retrieve vxlan ip address
  local_action: script cidr.py {{ rpc_user_config.tunnel_cidr }} {{ansible_default_ipv4.address }}
  register: vxlan_address
  when: rpc_user_config.tunnel_cidr is defined

- name: retrieve storage ip address
  local_action: script cidr.py {{ rpc_user_config.storage_cidr }} {{ansible_default_ipv4.address }}
  register: storage_address
  when: rpc_user_config.storage_cidr is defined

- name: retrieve replication ip address
  local_action: script cidr.py {{ rpc_user_config.repl_cidr }} {{ansible_default_ipv4.address }}
  register: repl_address
  when: rpc_user_config.repl_cidr is defined

- name: remove previously configured interfaces.d fragments
  file: dest=/etc/network/interfaces.d state=absent

- name: create fresh interfaces.d directory
  file: path=/etc/network/interfaces.d state=directory owner=root mode=0655

- name: enable sourcing of interfaces.d fragments
  lineinfile: >
    dest=/etc/network/interfaces
    insertafter=EOF
    regexp="{{ item.name }}.cfg$"
    line="source /etc/network/interfaces.d/{{ item.name }}.cfg"
  with_items: networking

- name: setup interface config files
  template: src=interface.j2 dest=/etc/network/interfaces.d/{{ item.name }}.cfg owner=root group=root mode=0644
  with_items: networking
  register: result
